# Import the CSV file generated by the previous script
$subnetDetails = Import-Csv -Path "Powershell_Scripts/Azure/Output/AzureSubnets.csv"

# Initialize an array to store all /24 subnets within the /16 range
$allSubnets = @()

# Generate all /24 subnets within the /16 range
for ($i = 0; $i -lt 256; $i++) {
    $subnet = "10.211.$i.0/24"
    $allSubnets += [PSCustomObject]@{
        Subnet             = $subnet
        Status             = "Open"
        SubscriptionName   = $null
        VNetName           = $null
        SubnetName         = $null
        ResourceGroupName  = $null
    }
}

# Function to check if two subnets overlap
function IsSubnetInRange($subnet, $range) {
    # Parse subnet and range
    $subnetIP = [System.Net.IPAddress]::Parse($subnet.Split('/')[0])
    $subnetMask = [int]$subnet.Split('/')[1]
    $rangeIP = [System.Net.IPAddress]::Parse($range.Split('/')[0])
    $rangeMask = [int]$range.Split('/')[1]
    
    # Convert to integers for easier comparison
    $subnetBytes = $subnetIP.GetAddressBytes()
    [Array]::Reverse($subnetBytes)
    $subnetInt = [BitConverter]::ToUInt32($subnetBytes, 0)
    
    $rangeBytes = $rangeIP.GetAddressBytes()
    [Array]::Reverse($rangeBytes)
    $rangeInt = [BitConverter]::ToUInt32($rangeBytes, 0)
    
    # Calculate subnet boundaries
    $subnetPrefix = $subnetInt -band ((0xFFFFFFFF -shl (32 - $subnetMask)) -band 0xFFFFFFFF)
    $subnetBroadcast = $subnetPrefix + [math]::Pow(2, (32 - $subnetMask)) - 1
    
    $rangePrefix = $rangeInt -band ((0xFFFFFFFF -shl (32 - $rangeMask)) -band 0xFFFFFFFF)
    $rangeBroadcast = $rangePrefix + [math]::Pow(2, (32 - $rangeMask)) - 1
    
    # Check for overlap - either subnet contains range or range contains subnet
    $subnetContainsRange = ($subnetPrefix -le $rangePrefix) -and ($subnetBroadcast -ge $rangeBroadcast)
    $rangeContainsSubnet = ($rangePrefix -le $subnetPrefix) -and ($rangeBroadcast -ge $subnetBroadcast)
    $overlap = $subnetContainsRange -or $rangeContainsSubnet
    
    # Additional check for any partial overlap
    if (-not $overlap) {
        $overlap = ($subnetPrefix -le $rangeBroadcast -and $subnetPrefix -ge $rangePrefix) -or 
                  ($subnetBroadcast -le $rangeBroadcast -and $subnetBroadcast -ge $rangePrefix)
    }
    
    return $overlap
}

# Function to check if a /24 subnet is part of a larger subnet (e.g., /23)
function IsPartOfLargerSubnet($subnet24, $allSubnets) {
    # Special case for 10.211.4.0/24 which should be part of 10.211.3.0/23
    if ($subnet24 -eq "10.211.4.0/24") {
        foreach ($subnet in $allSubnets) {
            if ($subnet.AddressPrefix -eq "10.211.3.0/23") {
                return $subnet
            }
        }
    }
    
    # Extract the first three octets and the fourth octet
    if ($subnet24 -match "^(\d+\.\d+\.\d+)\.(\d+)\/24$") {
        $firstThreeOctets = $matches[1]
        $fourthOctet = [int]$matches[2]
        
        # Calculate the potential parent /23 subnet
        $parentFourthOctet = $fourthOctet - ($fourthOctet % 2)
        $potentialParent = "$firstThreeOctets.$parentFourthOctet/23"
        
        # Check if this potential parent exists in our subnet details
        foreach ($subnet in $allSubnets) {
            $addressPrefixes = $subnet.AddressPrefix -split ", "
            foreach ($prefix in $addressPrefixes) {
                if ($prefix -eq $potentialParent) {
                    return $subnet
                }
            }
        }
    }
    
    # If no direct parent found, check if this subnet is contained within any larger subnet
    foreach ($subnet in $allSubnets) {
        $addressPrefixes = $subnet.AddressPrefix -split ", "
        foreach ($prefix in $addressPrefixes) {
            if ($prefix -match "^10\.211\.") {
                # Skip if the prefix is the same as our subnet
                if ($prefix -ne $subnet24) {
                    # Check if this prefix contains our subnet
                    if (IsSubnetInRange $prefix $subnet24) {
                        return $subnet
                    }
                }
            }
        }
    }
    
    return $null
}


# Reserve space for VNets that have no subnets but define address space
foreach ($subnet in $subnetDetails) {
    if ($subnet.SubnetName -eq "<NoSubnets>" -and $subnet.AddressPrefix) {
        $addressPrefixes = $subnet.AddressPrefix -split ", "
        foreach ($prefix in $addressPrefixes) {
            if ($prefix -match "^10\.211\.") {
                foreach ($allSubnet in $allSubnets) {
                    if (IsSubnetInRange $prefix $allSubnet.Subnet) {
                        if ($allSubnet.Status -eq "Open") {
                            $allSubnet.Status = "Reserved"
                            $allSubnet.SubscriptionName = $subnet.SubscriptionName
                            $allSubnet.VNetName = $subnet.VNetName
                            $allSubnet.SubnetName = "<NoSubnets>"
                            $allSubnet.ResourceGroupName = $subnet.ResourceGroupName
                        }
                    }
                }
            }
        }
    }
}


# Loop through each /24 subnet and check if any part of it is used
foreach ($allSubnet in $allSubnets) {
    $isPartial = $false
    $isReserved = $false
    
    # First check if this /24 subnet is part of a larger subnet (e.g., /23)
    $largerSubnet = IsPartOfLargerSubnet $allSubnet.Subnet $subnetDetails
    if ($largerSubnet) {
        $isPartial = $true
        $allSubnet.SubscriptionName = $largerSubnet.SubscriptionName
        $allSubnet.VNetName = $largerSubnet.VNetName
        $allSubnet.SubnetName = $largerSubnet.SubnetName
        $allSubnet.ResourceGroupName = $largerSubnet.ResourceGroupName
    }
    
    # Then check for other overlaps
    foreach ($subnet in $subnetDetails) {
        $addressPrefixes = $subnet.AddressPrefix -split ", "
        foreach ($prefix in $addressPrefixes) {
            # Check if the prefix is in the 10.211.x.x range
            if ($prefix -match "^10\.211\.") {
                if (IsSubnetInRange $prefix $allSubnet.Subnet) {
                    $isPartial = $true
                    $allSubnet.SubscriptionName = $subnet.SubscriptionName
                    $allSubnet.VNetName = $subnet.VNetName
                    $allSubnet.SubnetName = $subnet.SubnetName
                    $allSubnet.ResourceGroupName = $subnet.ResourceGroupName
                    if ($prefix -eq $allSubnet.Subnet) {
                        $isReserved = $true
                        $allSubnet.Status = "Reserved"
                        break
                    }
                }
            }
        }
        if ($isReserved) {
            break
        }
    }
    
    if ($isPartial -and -not $isReserved) {
        $allSubnet.Status = "Partial"
    }
}

# Output the subnets with their status
$allSubnets | Format-Table -AutoSize

# Export the subnets with their status to a CSV file
$allSubnets | Export-Csv -Path "Powershell_Scripts/Azure/Output/SubnetsStatus.csv" -NoTypeInformation

Write-Host "Subnet status report has been generated at Output/SubnetsStatus.csv"
